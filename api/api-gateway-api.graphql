schema {
  query: Query 
  mutation: Mutation 
  subscription: Subscription 
}

type Query {
  health: Health! 
  metrics: Metrics!
  projects: [Project!]! 
  project(id: ID!): Project 
  historyAnalytics(timePreset: TimePreset!, pageSize: Int, pageToken: String): HistoryAnalyticsPayload!
}

type Mutation {
  createProject(input: CreateProjectInput!): ProjectPayload!
  updateProject(id: ID!, input: UpdateProjectInput!): ProjectPayload!
  deleteProject(id: ID!): DeleteProjectPayload!

  login(input: LoginInput!): AuthPayload!
  logout: LogoutPayload!
  refreshToken(refreshToken: String!): RefreshTokenPayload!

  logAnalyticsEvent(input: LogAnalyticsEventInput!): LogAnalyticsEventPayload!
  reportServiceError(input: ReportServiceErrorInput!): ReportServiceErrorPayload!
}

type Subscription {
  realtimeAnalyticsUpdated: RealtimeAnalyticsPayload!
}

enum TimePreset {
  LAST_24_HOURS
  LAST_7_DAYS
  LAST_30_DAYS
  LAST_3_MONTHS
  LAST_12_MONTHS
  LAST_24_MONTHS
}

"""
Health check endpoint to monitor system status 
"""
type Health {
  status: SystemStatus! # Overall system status 
  gateway: GatewayStatus! # Gateway service status 
  services: [ServiceStatus!]! # Status of all services 
}

enum SystemStatus {
  UP
  DEGRADED
  DOWN
}

type GatewayStatus {
  status: SystemStatus!
  version: String!
  uptime: String! # Time since last restart ex. "72h" 
} 

interface ServiceStatus {
  name: String!
  status: SystemStatus!
  protocol: Protocol! 
  uptime: String! # Time since last restart ex. "72h" 
} 

type RESTServiceStatus implements ServiceStatus {
  name: String!
  status: SystemStatus!
  protocol: Protocol! 
} 

type KafkaServiceStatus implements ServiceStatus {
  name: String!
  status: SystemStatus!
  protocol: Protocol! 
  uptime: String! # Time since last restart ex. "72h" 
  kafkaStatus: SystemStatus!
  consumerLag: Int! # Number of unconsumed messages in Kafka topic 
} 

type GRPCServiceStatus implements ServiceStatus {
  name: String!
  status: SystemStatus!
  protocol: Protocol! 
} 

enum Protocol {
  REST
  GRPC
  KAFKA
}

"""
Metrics endpoint to monitor system performance 
"""
type Metrics {
  timestamp: String! # Timestamp of the metrics 

  # Hardware metrics
  cpuUsage: Float! # CPU usage percentage 
  memoryUsage: Float! # Memory usage percentage 
  diskUsage: Float! # Disk usage percentage 
  networkUsage: Float! # Network usage percentage 

  # Performance metrics
  requestRate: Float! # Requests per second 
  errorRate: Float! # Error rate percentage 
  responseTime: Float! # Average response time in ms 
  cacheHitRate: Float! # Cache hit rate percentage 
  activeConnections: Int! # Number of active connections 

  # Security metrics
  rateLimitUsage: Int! # Number of requests that hit rate limit 
  unauthorizedRequests: Int! # Number of unauthorized requests 
  maliciousRequests: Int! # Number of malicious requests 

  # Service metrics
  serviceMetrics: [ServiceMetrics!]! # Metrics for each service 
}

type ServiceMetrics {
  name: String!
  responseTime: Float! # Average response time in ms 
  errorRate: Float! # Error rate percentage 
  requestRate: Float! # Requests per second 
  activeConnections: Int! # Number of active connections 
  uptime: String! # Time since last restart ex. "72h" 
}

"""
Content Management Service 
"""
type Project {
  id: ID!
  title: String!
  description: String
  published: Boolean!
  publicationDate: String
  thumbnail: Image
  content: String 
  images: [Image!]!
}

type Image {
  url: String!
  altText: String
}

input CreateProjectInput {
  title: String!
  description: String
  published: Boolean! 
  publicationDate: String
  thumbnail: ImageInput
  content: String 
  images: [ImageInput!]!
}

input UpdateProjectInput {
  title: String
  description: String
  published: Boolean
  publicationDate: String
  thumbnail: ImageInput
  content: String
  images: [ImageInput!]
} 

input ImageInput {
  url: String!
  altText: String
}

type ProjectPayload {
  success: Boolean!
  message: String
  project: Project
  errors: [Error!]
} 

type DeleteProjectPayload {
  success: Boolean!
  message: String
  id: ID 
  errors: [Error!]
} 

"""
Authentication
"""
input LoginInput {
  email: String!
  password: String!
}

type AuthPayload {
  success: Boolean!
  message: String
  accessToken: String
  refreshToken: String
  expiresIn: Int # Seconds until expiration
  tokenType: String # "Bearer"
  user: User
  errors: [Error!]
}

type LogoutPayload {
  success: Boolean!
  message: String
  errors: [Error!]
}

type User {
  id: ID!
  email: String!
  role: UserRole!
  name: String
}

enum UserRole {
  ADMIN
  VISITOR
}

"""
Analytics
""" 
type HistoryAnalyticsPayload {
  metadata: AnalyticsMetadata! 
  historyAnalytics: [HistoryAnalytics!]! 
  overviewMetrics: OverviewMetrics! 
  nextPageToken: String 
  hasMorePages: Boolean! 
} 

type AnalyticsMetadata {
  requestTimestamp: String! 
} 

type HistoryAnalytics {
  timestamp: String! 
  visitors: Int! 
  pageViews: Int! 
  bounceRate: Float! 
  avgSessionDuration: Float! 
} 

type OverviewMetrics {
  totalVisitors: Int! 
  totalPageViews: Int! 
  avgBounceRate: Float! 
  avgSessionDuration: Float! 
  totalSessions: Int! 
  pagesPerSession: Float! 
} 

input LogAnalyticsEventInput {
  eventId: ID! 
  timestamp: String! 
  userId: ID! 
  eventType: AnalyticsEventType!
  pageUrl: String! 
  referrer: String 
  userAgent: String 
  ipAddress: String 
} 

enum AnalyticsEventType {
  PAGE_VIEW
  CLICK
  SCROLL
}

type LogAnalyticsEventPayload {
  success: Boolean!
  message: String
  errors: [Error!]
} 

type RealtimeAnalyticsPayload {
  timestamp: String! 
  visitors: Int! 
  pageViews: Int! 
  bounceRate: Float! 
} 

"""
Notification
""" 
input ReportServiceErrorInput {
  timestamp: String! 
  serviceName: String! 
  errorMessage: String! 
} 

type ReportServiceErrorPayload {
  success: Boolean!
  message: String
  errors: [Error!]
} 

type Error {
  code: String!
  message: String!
}